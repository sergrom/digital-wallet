version: '2'

networks:
  app-tier:
    driver: bridge

volumes:
  kafka-volume:
  zookeeper-volume:

services:
  db_usrsvc:
    container_name: db_usrsvc
    image: postgres
    restart: always
    shm_size: 128mb
    networks:
      - app-tier
    ports:
    - 6543:5432
    environment:
      POSTGRES_DB: "usrsvc"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "123456"
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d usrsvc"]
      interval: 5s
      timeout: 5s
      retries: 5

  db_txsvc:
    container_name: db_txsvc
    image: postgres
    restart: always
    shm_size: 128mb
    networks:
      - app-tier
    ports:
    - 6544:5432
    environment:
      POSTGRES_DB: "txsvc"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "123456"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d txsvc"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    container_name: kafka-zookeeper
    image: docker.io/bitnami/zookeeper:3.8
    restart: always
    networks:
      - app-tier
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.3
    restart: always
    networks:
      - app-tier
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60

  nats:
    container_name: nats
    image: nats:2.7.0-alpine
    restart: always
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/varz"]
      interval: 5s
      timeout: 5s
      retries: 5

  usrsvc:
    build: user-service/
    restart: always
    networks:
      - app-tier
    ports:
    - 9101:9101
    depends_on:
      db_usrsvc:
        condition: service_healthy
      nats:
        condition: service_healthy
      kafka:
        condition: service_healthy

  txsvc:
    build: transactions-service/
    restart: always
    networks:
      - app-tier
    ports:
      - 9102:9102
    depends_on:
      db_txsvc:
        condition: service_healthy
      nats:
        condition: service_healthy
      kafka:
        condition: service_healthy

